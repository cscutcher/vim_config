set encoding=utf-8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Detect python version
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
python << endpython
import os.path
import vim

search_directory = os.path.abspath(os.getcwd())

project_python_version = None

while project_python_version is None:
    try:
        project_python_version = open(
            os.path.join(search_directory, ".python_version")).read().strip()
    except IOError:
        search_directory = os.path.dirname(search_directory)

    if search_directory == "/":
        break

if project_python_version is None:
    pass
elif project_python_version == "3":
    vim.command('let g:pymode_python = "python3"')
else:
    vim.command('let g:pymode_python = "python"')

endpython

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Loading
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'airblade/vim-gitgutter'
Plug 'amoffat/snake'
Plug 'benekastah/neomake'
Plug 'easymotion/vim-easymotion'
Plug 'embear/vim-localvimrc'
Plug 'ervandew/supertab'
Plug 'klen/python-mode'
Plug 'nvie/vim-flake8'
Plug 'rhysd/vim-clang-format'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-pathogen'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/ConflictMotions'
Plug 'vim-scripts/CountJump'
Plug 'vim-scripts/ingo-library'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Filetype detection, plugin and indention on
filetype plugin indent on

"Syntax highlighting on
syntax on
"Copy indent from previous line
set autoindent

"Case insensitive search by default
set ic

"Highlight search
set hls

"Tab width in spaces
set tabstop=4
"Number of spaces for each tab indent
set shiftwidth=4
"Use spaces instead of tabs in insert
set expandtab

"Enable Mouse
set mouse=a

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocmd settings for detecting splits and new windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd that will set up the w:created variable
autocmd VimEnter * autocmd WinEnter * let w:created=1

" Consider this one, since WinEnter doesn't fire on the first window created when Vim launches.
" You'll need to set any options for the first window in your vimrc,
" or in an earlier VimEnter autocmd if you include this
autocmd VimEnter * let w:created=1



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key Mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <silent><F3> :NEXTCOLOR<cr>
map <silent><F2> :PREVCOLOR<cr>

"Block F1 because of weird putty issue
map <F1> <NOP>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Look and feel
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colo fruity

"Specific theming for running under gui
if has("gui_running")
    highlight SpellBad term=underline gui=undercurl guisp=Orange
    if has("win32")
        :set guifont=consolas
    else
        :set guifont="Andale Mono" 10
    endif
endif

set colorcolumn=99

" Highlight long lines
function! HighlightLongLines()
    if !exists('w:hightlight_long_lines_length')
        let w:hightlight_long_lines_length=80
    end
    call ClearHighlightLongLines()
    let w:hightlight_long_lines_match=matchadd('ErrorMsg', '\%>'. w:hightlight_long_lines_length . 'v.\+', -1)
endfunction

function! ClearHighlightLongLines()
    if exists('w:hightlight_long_lines_match')
        call matchdelete(w:hightlight_long_lines_match)
        unlet w:hightlight_long_lines_match
    end
endfunction

command!  -bar -nargs=0 ClearHighlightLongLines call ClearHighlightLongLines()
command!  -bar -nargs=0 HighlightLongLines call HighlightLongLines()

autocmd BufWinEnter * call HighlightLongLines()
autocmd WinEnter * if !exists('w:created') | call HighlightLongLines() | endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File specific auto commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Use tabs in makefiles
autocmd FileType make setlocal noexpandtab

"Enable deleting of useless whitespace on some files
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.rst :%s/\s\+$//e
autocmd BufWritePre *.txt :%s/\s\+$//e
autocmd BufWritePre *.groovy :%s/\s\+$//e
autocmd BufWritePre *.yaml :%s/\s\+$//e

"Disable spellcheck in erlang
autocmd FileType erlang setlocal nospell

"Shorter indent for yaml
autocmd FileType yaml setlocal tabstop=2
autocmd FileType yaml setlocal shiftwidth=2

"Prevent using " on python
autocmd FileType python imap <buffer> <nowait> " '
autocmd FileType python inoremap <buffer> <nowait> \" "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trim Spaces
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Highlight trailing space in files
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"Function to specifically show trailing space
function! ShowSpaces(...)
    let @/='\v(\s+$)|( +\ze\t)'
    let oldhlsearch=&hlsearch
    if !a:0
        let &hlsearch=!&hlsearch
    else
        let &hlsearch=a:1
    end
    return oldhlsearch
endfunction

"Function to actually trim space
function! TrimSpaces() range
    let oldhlsearch=ShowSpaces(1)
    execute a:firstline.",".a:lastline."substitute ///gec"
    let &hlsearch=oldhlsearch
endfunction

command!  -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command!  -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX helper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function TMUXCopy() range
  execute a:firstline.",".a:lastline." write ! cat | tmux load-buffer -"
endfunction

command -range=% -nargs=0 TMUXCopy :<line1>,<line2>call TMUXCopy()
command TMUXPaste :read! tmux save-buffer -
command TMUXPasteReg :let @" = system("tmux save-buffer -")

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python Mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:pymode_folding = 0
let g:pymode_rope_guess_project = 0
let g:pymode_rope = 0

" Prefer line length of 99
let g:pymode_options_max_line_length = 99

" Use syntastic for python checking instead
let g:pymode_lint = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VirtualEnv
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set secure
if exists("$VIRTUAL_ENV")
    let virtualenv_vimrc = $VIRTUAL_ENV . "/.vimrc"
    if filereadable(virtualenv_vimrc)
        exec ":source " . virtualenv_vimrc
    else
        unlet virtualenv_vimrc
    endif
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Allow editing using relative to buffer path in commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SetBufDirectory()
    let l:path = expand("%")
    if isdirectory(l:path)
        let b:rel_directory = fnamemodify(l:path, ":.")
    else
        let b:rel_directory = fnamemodify(l:path, ":.:h")
    endif
    exe "cmap %/ ".b:rel_directory."/"
endfunction

autocmd BufEnter * call SetBufDirectory()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RST
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType rst :setlocal spell

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Recognise modeline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set modeline

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<s-tab>"
let g:UltiSnipsJumpBackwardTrigger="<tab>"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search recursively for tags
set tags=tags;/


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" localvimrc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:localvimrc_persistent=1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" detect file changes inbackground
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd CursorHold * call Timer()
function! Timer()
    call feedkeys("f\e")
    checktime
endfunction
set updatetime=5000  " milliseconds


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

let g:syntastic_python_checkers = ["pylama"]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM Easy Motion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Within line motion
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>h <Plug>(easymotion-linebackward

let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

" Searching
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YAPF
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command Yapf :0,$!yapf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Script to wrap lines without needing to set textwidth
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" From https://vi.stackexchange.com/a/11610
function! ParagraphToEightyChars()
   while (len(getline(".")) > 79)
      normal! 0
      " Find the first white-space character before the 81st character.
      call search('\(\%81v.*\)\@<!\s\(.*\s.\{-}\%81v\)\@!', 'c', line('.'))
      " Replace it with a new line.
      exe "normal! r\<CR>"
      " If the next line has words, join it to avoid weird paragraph breaks.
      if (getline(line('.')+1) =~ '\w')
         normal! J
      endif
   endwhile
   " Trim any accidental trailing whitespace
   :s/\s\+$//e
endfunction


" I can never read these mappings. It's alt-shift-j!
nnoremap <silent><A-J> :call ParagraphToEightyChars()<CR>
