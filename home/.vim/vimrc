set encoding=utf-8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Detect python version
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
python << endpython
import os.path
import vim

search_directory = os.path.abspath(os.getcwd())

project_python_version = None

while project_python_version is None:
    try:
        project_python_version = open(
            os.path.join(search_directory, ".python_version")).read().strip()
    except IOError:
        search_directory = os.path.dirname(search_directory)

    if search_directory == "/":
        break

if project_python_version is None:
    vim.command('let g:pymode_python = "python3"')
elif project_python_version == "3":
    vim.command('let g:pymode_python = "python3"')
else:
    vim.command('let g:pymode_python = "python"')

endpython

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Loading
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

Plug 'SirVer/ultisnips'
Plug 'airblade/vim-gitgutter'
" I don't use this yet, but it's too cool to forget
" Snake (SNAAAAAAAAAKKKE) is a Python module for Vim that let's you use Python
" to its fullest extent to enhance Vim.
" https://github.com/amoffat/snake
" Plug 'amoffat/snake'
Plug 'benekastah/neomake'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'embear/vim-localvimrc'
Plug 'klen/python-mode'
Plug 'rhysd/vim-clang-format'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-pathogen'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/ConflictMotions'
Plug 'vim-scripts/CountJump'
Plug 'vim-scripts/ingo-library'
" Nice full colorscheme
Plug 'jacoborus/tender.vim'
" Python formatter
Plug 'ambv/black'
" Python import sorter
Plug 'fisadev/vim-isort'
" Designed as a bright theme with pastel 'retro groove' colors and light/dark
" mode switching in the way of solarized. The main focus when developing
" gruvbox is to keep colors easily distinguishable, contrast enough and still
" pleasant for the eyes.
Plug 'morhetz/gruvbox'
" Let's try autocomplete again
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
" Use supertab to handle tab completion
Plug 'ervandew/supertab'
" Sublime Style Multiple Cursors
Plug 'terryma/vim-multiple-cursors'
" Useful review tool
Plug 'junkblocker/patchreview-vim'
" Highlighting for tridactyl
Plug 'tridactyl/vim-tridactyl'

" Review PRs from VIM
" Sadly both have bugs for enterprise github at the moment
" Requires yaourt -S ruby-neovim
Plug 'codegram/vim-codereview'
Plug 'tiev/githubreview.vim'
Plug 'codable/diffreview'

" Critic looked good to see all PRs but seems not to work.
" Plug 'AGhost-7/critiq.vim'

" PyMode again
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" Better sessions
Plug 'xolox/vim-session'
" Required by vim-session
Plug 'xolox/vim-misc'
" Diff directories
Plug 'will133/vim-dirdiff'

" Ansible highlighting
Plug 'pearofducks/ansible-vim'

" View color codes
Plug 'chrisbra/Colorizer'

" Unite for guis and task warrior
Plug 'Shougo/unite.vim'

" Task warrior
Plug 'farseer90718/vim-taskwarrior'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Filetype detection, plugin and indention on
filetype plugin indent on

"Syntax highlighting on
syntax on
"Copy indent from previous line
set autoindent

"Case insensitive search by default
set ic

"Highlight search
set hls

"Tab width in spaces
set tabstop=4
"Number of spaces for each tab indent
set shiftwidth=4
"Use spaces instead of tabs in insert
set expandtab

"Enable Mouse
set mouse=a

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocmd settings for detecting splits and new windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd that will set up the w:created variable
autocmd VimEnter * autocmd WinEnter * let w:created=1

" Consider this one, since WinEnter doesn't fire on the first window created when Vim launches.
" You'll need to set any options for the first window in your vimrc,
" or in an earlier VimEnter autocmd if you include this
autocmd VimEnter * let w:created=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key Mapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Block F1 because of weird putty issue
map <F1> <NOP>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Look and feel
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Uncomment following 2 lines for quickly trying multiple themes
" map <silent><F3> :NEXTCOLOR<cr>
" map <silent><F2> :PREVCOLOR<cr>

if $COLORTERM == 'truecolor'
  set t_Co=256
  set termguicolors
endif
"Specific theming for running under gui
if has("gui_running")
    highlight SpellBad term=underline gui=undercurl guisp=Orange
    if has("win32")
        :set guifont=consolas
    else
        :set guifont="Andale Mono" 10
    endif
endif

" Theme

function! DarkMode()
    set background=dark
    if (has("termguicolors"))
        set termguicolors
        colo tender
    else
        colo fruity
    endif
endfunction

function! LightMode()
    set background=light
    let g:gruvbox_contrast_light="medium"
    colo gruvbox
endfunction

function! OutsideMode()
    set background=light
    let g:gruvbox_contrast_light="hard"
    colo gruvbox
endfunction

function! LowColorMode()
    set background=dark
    let g:gruvbox_termcolors=16
    color gruvbox
endfunction

command! LightMode call LightMode()
command! DarkMode call DarkMode()
command! OutsideMode call OutsideMode()
command! LowColorMode call LowColorMode()

set colorcolumn=80

if $COLOR_MODE == "light"
    OutsideMode
else
    DarkMode
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Format Lua
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! FormatLua()
    :%!lua-format
endfunction
command! FormatLua call FormatLua()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File specific auto commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Use tabs in makefiles
autocmd FileType make setlocal noexpandtab

"Enable deleting of useless whitespace on some files
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.txt :%s/\s\+$//e
autocmd BufWritePre *.groovy :%s/\s\+$//e
autocmd BufWritePre *.yaml :%s/\s\+$//e
autocmd BufWritePre *.ttm :%s/\s\+$//e
autocmd BufWritePre *.lua :%s/\s\+$//e

"Shorter indent for yaml
autocmd FileType yaml setlocal tabstop=2
autocmd FileType yaml setlocal shiftwidth=2

"Prevent using " on lua
autocmd FileType lua imap <buffer> <nowait> " '
autocmd FileType lua inoremap <buffer> <nowait> \" "

" Autoformat lua
autocmd BufWritePre *.lua :FormatLua

"Prevent using " on python
autocmd FileType python imap <buffer> <nowait> " '
autocmd FileType python inoremap <buffer> <nowait> \" "
"Set textwidth to 79 for python files
autocmd FileType python setlocal textwidth=79
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trim Spaces
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Highlight trailing space in files
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"Function to specifically show trailing space
function! ShowSpaces(...)
    let @/='\v(\s+$)|( +\ze\t)'
    let oldhlsearch=&hlsearch
    if !a:0
        let &hlsearch=!&hlsearch
    else
        let &hlsearch=a:1
    end
    return oldhlsearch
endfunction

"Function to actually trim space
function! TrimSpaces() range
    let oldhlsearch=ShowSpaces(1)
    execute a:firstline.",".a:lastline."substitute ///gec"
    let &hlsearch=oldhlsearch
endfunction

command!  -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command!  -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX helper
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! TMUXCopy() range
  execute a:firstline.",".a:lastline." write ! cat | tmux load-buffer -"
endfunction

command! -range=% -nargs=0 TMUXCopy :<line1>,<line2>call TMUXCopy()
command! TMUXPaste :read! tmux save-buffer -
command! TMUXPasteReg :let @" = system("tmux save-buffer -")

function! TMUXPushRegister()
    if (v:event['regname'] == 't')
        echom system('tmux load-buffer -', join(v:event.regcontents, "\n"))
    endif
endfunction

command! TMUXPullRegister :let @t = system("tmux save-buffer -")

autocmd Signal SIGUSR1 :TMUXPullRegister
autocmd TextYankPost * :call TMUXPushRegister()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python Mode and rope
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:pymode_folding = 0

" Rope
if isdirectory(".ropeproject")
    let g:pymode_rope = 1
    let g:pymode_rope_autoimport = 1
else
    let g:pymode_rope = 0
    let g:pymode_rope_autoimport = 0
end
let g:pymode_rope_complete_on_dot = 0

" Prefer line length of 99
let g:pymode_options_max_line_length = 99

" Use syntastic for python checking instead
let g:pymode_lint = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VirtualEnv
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set secure
if exists("$VIRTUAL_ENV")
    let virtualenv_vimrc = $VIRTUAL_ENV . "/.vimrc"
    if filereadable(virtualenv_vimrc)
        exec ":source " . virtualenv_vimrc
    else
        unlet virtualenv_vimrc
    endif
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Allow editing using relative to buffer path in commands
" i.e. to edit a file relative to the currently open one write
" :e %/
" and the %/ will autoexpand to the directory of the file being currently
" edited.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SetBufDirectory()
    let l:path = expand("%")
    if isdirectory(l:path)
        let b:rel_directory = fnamemodify(l:path, ":.")
    else
        let b:rel_directory = fnamemodify(l:path, ":.:h")
    endif
    exe "cmap %/ ".b:rel_directory."/"
endfunction

autocmd BufEnter * call SetBufDirectory()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tools for editing mostly text based stuff e.g. documentation and git
" commits
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set spelllang=en_gb

function! TextModeEnable()
    set spell
    " I briefly considered the following useful, but actually it's kinda
    " awkward.
    " set complete+=kspell
endfunction

function! TextModeDisable()
    set nospell
    " I briefly considered the following useful, but actually it's kinda
    " awkward.
    " set complete-=kspell
endfunction

autocmd FileType rst call TextModeEnable()
autocmd FileType gitcommit call TextModeEnable()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Recognise modeline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set modeline

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<s-tab>"
let g:UltiSnipsJumpBackwardTrigger="<tab>"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search recursively for tags
set tags=tags;/


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" localvimrc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:localvimrc_persistent=1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" detect file changes in background
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" How long before CursorHold triggers
set updatetime=5000  " milliseconds
let g:background_update_enable = 1

autocmd CursorHold * call CheckForBackgroundUpdate()
function! CheckForBackgroundUpdate()
    if g:background_update_enable == 1
        call feedkeys("f\e")
        checktime
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

let g:syntastic_python_checkers = ["pylama"]
let g:syntastic_python_pylama_exec = "pylava"
let g:syntastic_rst_checkers = ["rstcheck"]
let g:syntastic_yaml_checkers = ["yamlxs"]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM Easy Motion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YAPF
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! Yapf :0,$!yapf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Script to wrap lines without needing to set textwidth
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" From https://vi.stackexchange.com/a/11610
function! ParagraphToEightyChars()
   while (len(getline(".")) > 79)
      normal! 0
      " Find the first white-space character before the 81st character.
      call search('\(\%81v.*\)\@<!\s\(.*\s.\{-}\%81v\)\@!', 'c', line('.'))
      " Replace it with a new line.
      exe "normal! r\<CR>"
      " If the next line has words, join it to avoid weird paragraph breaks.
      if (getline(line('.')+1) =~ '\w')
         normal! J
      endif
   endwhile
   " Trim any accidental trailing whitespace
   :s/\s\+$//e
endfunction


" I can never read these mappings. It's alt-shift-j!
nnoremap <silent><A-J> :call ParagraphToEightyChars()<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tab completion and YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" From https://stackoverflow.com/a/22253548
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"


" The *g:ycm_autoclose_preview_window_after_completion* option
"
" When this option is set to '1', YCM will auto-close the 'preview' window after
" the user accepts the offered completion string. If there is no 'preview' window
" triggered because there is no 'preview' string in 'completeopt', this option is
" irrelevant. See the |g:ycm_add_preview_to_completeopt| option for more details.
"
" Default: '0'

let g:ycm_autoclose_preview_window_after_completion = 1

" The *g:ycm_autoclose_preview_window_after_insertion* option
"
" When this option is set to '1', YCM will auto-close the 'preview' window after
" the user leaves insert mode. This option is irrelevant if
" |g:ycm_autoclose_preview_window_after_completion| is set or if no 'preview'
" window is triggered. See the |g:ycm_add_preview_to_completeopt| option for more
" details.

let g:ycm_autoclose_preview_window_after_insertion = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Duplicate Session Command
" From https://vi.stackexchange.com/a/3899
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bar DuplicateTabpane
      \ let s:sessionoptions = &sessionoptions |
      \ try |
      \   let &sessionoptions = 'blank,help,folds,winsize,localoptions' |
      \   let s:file = tempname() |
      \   execute 'mksession ' . s:file |
      \   tabnew |
      \   execute 'source ' . s:file |
      \ finally |
      \   silent call delete(s:file) |
      \   let &sessionoptions = s:sessionoptions |
      \   unlet! s:file s:sessionoptions |
      \ endtry

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options for vim-session
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" By default don't ask to save session
let g:session_autosave = 'no'
" Don't autoload session
let g:session_autoload = 'no'

function! EnableAutoSessionSave()
    if !exists('g:session_disable_autosave_detection') || g:session_disable_autosave_detection !=? 'yes'
        let g:session_autosave = 'prompt'
    endif
endfunction

" But enable prompting if we add tabs or windows
autocmd WinNew * call EnableAutoSessionSave()
autocmd TabNew * call EnableAutoSessionSave()



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer Cleanup (see also BufOnly in `~/.vim/plugin/BufOnly.vim`)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! BufDeleteHidden()
  let tpbl=[]
  let closed = 0
  call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
  for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
    if getbufvar(buf, '&mod') == 0
      silent execute 'bwipeout' buf
      let closed += 1
    endif
  endfor
  echo "Closed ".closed." hidden buffers"
endfunction

command! BufDeleteHidden call BufDeleteHidden()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts = 1
